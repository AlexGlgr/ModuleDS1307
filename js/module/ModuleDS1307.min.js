class ClassRealTimeClockSet{constructor(_day,_month,_year,_hour,_minute,_second){this.name="ClassRealTimeClockSet",this._date=void 0,this.Init(_day,_month,_year,_hour,_minute,_second)}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}Init(_day,_month,_year,_hour,_minute,_second){if(null!=_day&&null!=_month&&null!=_year&&null!=_hour&&null!=_minute&&null!=_second){let day=_day||1,month=_month||1,year=_year||1970,hour=_hour||12,minute=_minute||0,second=_second||0;if(!("number"==typeof day&&"number"==typeof month&&"number"==typeof year&&"number"==typeof hour&&"number"==typeof minute&&"number"==typeof second&&Number.isInteger(day)&&Number.isInteger(month)&&Number.isInteger(year)&&Number.isInteger(hour)&&Number.isInteger(minute)&&Number.isInteger(second)))throw new err(ClassRealTimeClockSet.ERROR_MSG_ARG_VALUE,ClassRealTimeClockSet.ERROR_CODE_ARG_VALUE);year<1970&&(year=1970),year>2100&&(year=2100),month<1&&(month=1),month>12&&(month=12),day<1&&(day=1),day=day>31&&1&month^month>>3&1?31:day>30&&!(1&month^month>>3&1)?30:day>28&&2==month?year%4?28:29:1,hour<0&&(hour=0),hour>23&&(hour=23),minute<0&&(minute=0),minute>59&&(minute=59),second<0&&(second=0),second>59&&(second=59),this._date=new Date(year,month-1,day,hour,minute,second)}}}class ClassRealTimeClock{constructor(_opt){if(this.name="ClassRealTimeClock",PrimaryI2C.setup({sda:SDA,scl:SCL,bitrate:1e5}),this._rtc=require("https://raw.githubusercontent.com/AlexGlgr/ModuleDS1307/fork-Alexander/js/module/rtc.min.js").connect(PrimaryI2C),void 0===_opt)throw new err(ClassTypeRealTimeClock.ERROR_MSG_ARG_VALUE,ClassTypeRealTimeClock.ERROR_CODE_ARG_VALUE);if(console.log("Break point 1"),!(_opt instanceof ClassRealTimeClockSet))throw new err(ClassTypeRealTimeClock.ERROR_MSG_ARG_VALUE,ClassTypeRealTimeClock.ERROR_CODE_ARG_VALUE);console.log("Break point 2"),_opt._date instanceof Date&&this._rtc.setTime(_opt._date),this._TimeZone=E.getTimeZone(),console.log("Break point 3")}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}SetTime(_opt){if(!(_opt instanceof ClassRealTimeClockSet))throw new ClassAppError(ClassRealTimeClock.ERROR_MSG_ARG_VALUE,ClassRealTimeClock.ERROR_CODE_ARG_VALUE);if(!(_opt._date instanceof Date))throw new err("You must fill in the values to set time",ClassTypeRealTimeClock.ERROR_CODE_ARG_VALUE);this._rtc.setTime(_opt._date)}GetTime(_format){let res;switch(_format){case"iso":res=this._rtc.getTime("iso");break;case"hours":let time=this._rtc._date;res=this._rtc._leadZero(time.getHours())+":"+this._rtc._leadZero(time.getMinutes())+":"+this._rtc._leadZero(time.getSeconds());break;default:res=this._rtc.getTime("unixtime")}return res}SetTimeZone(_TimeZone){if(!Number.isInteger(_TimeZone))throw new err(ClassTypeRealTimeClock.ERROR_MSG_ARG_VALUE,ClassTypeRealTimeClock.ERROR_CODE_ARG_VALUE);_TimeZone<-11?_TimeZone=-11:_TimeZone>12&&(_TimeZone=12),this._TimeZone=_TimeZone}GetTimeZone(){return"GMT "+(this._TimeZone<0?"-":"+")+this._TimeZone}}exports={ClassRealTimeClockSet:ClassRealTimeClockSet,ClassRealTimeClock:ClassRealTimeClock};